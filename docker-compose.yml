version: '3.8'

services:
  db:
    image: postgres:15-alpine
    container_name: hava_araci_postgres_db
    volumes:
      - postgres_data_volume:/var/lib/postgresql/data/
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    networks: # Bu servisi özel ağımıza dahil ediyoruz
      - app-network
    restart: unless-stopped

  api:
    build:
      context: ./hava_araci_uretim
      dockerfile: Dockerfile
    container_name: hava_araci_api_service
    command: /app/entrypoint.sh
    volumes:
      - ./backend:/app
    environment:
      - SECRET_KEY=${SECRET_KEY}
      - DEBUG=${DEBUG}
      - DB_ENGINE=${DB_ENGINE}
      - DATABASE_NAME=${DB_NAME}
      - DATABASE_USER=${DB_USER}
      - DATABASE_PASSWORD=${DB_PASSWORD}
      - DATABASE_HOST=db # PostgreSQL servis adı (aynı network'te olduğu için direkt isimle erişim)
      - DATABASE_PORT=5432 # PostgreSQL'in container içindeki portu
      - ALLOWED_HOSTS=${ALLOWED_HOSTS} # Nginx'in IP'si veya '*' (geliştirme) veya reverse proxy ayarları
    depends_on:
      - db
    networks: # Bu servisi özel ağımıza dahil ediyoruz
      - app-network
    restart: unless-stopped

  nginx:
    build:
      context: ./frontend
      dockerfile: Dockerfile  
    container_name: hava_araci_nginx_frontend
    ports:
      - "80:80"   # Sadece Nginx'in 80 portunu dış dünyaya açıyoruz
      # - "443:443" # HTTPS gerekirse
    volumes: 
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - api
    networks:
      - app-network
    restart: unless-stopped

volumes:
  postgres_data_volume:

networks:
  app-network:
    driver: bridge